#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

// Structure to represent a three-address code instruction
typedef struct {
char op[3];
char arg1[10];
char arg2[10];
char result[10];
} Instruction;

Instruction code[MAX];
int instructionCount = 0;
int tempVarCount = 0;

// Function to generate a new temporary variable name
const char* newTemp() {
static char temp[5];
sprintf(temp, "t%d", tempVarCount++);
return temp;
}

// Function to emit an instruction to the code array
void emit(const char *op, const char *arg1, const char *arg2, const char *result) {
strcpy(code[instructionCount].op, op);
strcpy(code[instructionCount].arg1, arg1);
if (arg2 != NULL)
strcpy(code[instructionCount].arg2, arg2);
else
code[instructionCount].arg2[0] = '\0';
strcpy(code[instructionCount].result, result);
instructionCount++;
}

// Function to print the generated code
void printCode() {
printf("Three-Address Code:\n");
for (int i = 0; i < instructionCount; i++) {
printf("%s = %s %s %s\n", code[i].result, code[i].arg1, code[i].op, code[i].arg2);
}
}

// Parser function declarations
void expr();
void term();
void factor();

// Global variables for the parser
char input[MAX];
int pos = 0;
char token;

// Function to advance to the next token in the input
void nextToken() {
token = input[pos++];
}

// Function to parse an expression
void expr() {
char temp1[10], temp2[10], op[2];
term();
while (token == '+' || token == '-') {
strcpy(temp1, code[instructionCount - 1].result);
op[0] = token;
op[1] = '\0';
nextToken();
term();
strcpy(temp2, code[instructionCount - 1].result);
const char *temp = newTemp();
emit(op, temp1, temp2, temp);
}
}

// Function to parse a term
void term() {
char temp1[10], temp2[10], op[2];
factor();
while (token == '*' || token == '/') {
strcpy(temp1, code[instructionCount - 1].result);
op[0] = token;
op[1] = '\0';
nextToken();
factor();
strcpy(temp2, code[instructionCount - 1].result);
const char *temp = newTemp();
emit(op, temp1, temp2, temp);
}
}

// Function to parse a factor
void factor() {
char num[10];
if (isdigit(token)) {
int i = 0;
while (isdigit(token)) {
num[i++] = token;
nextToken();
}
num[i] = '\0';
const char *temp = newTemp();
emit("", num, NULL, temp);
}
}

// Main function
int main() {
printf("Enter an arithmetic expression: ");
scanf("%s", input);
nextToken();
expr();
printCode();
return 0;
}

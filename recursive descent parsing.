#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>

const char *input;
char lookahead;

void error(const char *msg) {
fprintf(stderr, "Error: %s\n", msg);
exit(1);
}

void nextToken() {
lookahead = *input++;
while (isspace(lookahead)) {
lookahead = *input++;
}
}

void match(char expected) {
if (lookahead == expected) {
nextToken();
} else {
char errorMsg[50];
snprintf(errorMsg, sizeof(errorMsg), "Expected '%c', but found '%c'", expected, lookahead);
error(errorMsg);
}
}

// Forward declarations
void E();
void E_();
void T();
void T_();
void F();

void E() {
T();
E_();
}

void E_() {
if (lookahead == '+') {
match('+');
T();
E_();
} // E' -> e (empty) is handled by doing nothing
}

void T() {
F();
T_();
}

void T_() {
if (lookahead == '') {
match('');
F();
T_();
} // T' -> e (empty) is handled by doing nothing
}

void F() {
if (lookahead == '(') {
match('(');
E();
match(')');
} else if (isalpha(lookahead)) {
// In our simplified grammar, 'id' is represented by a single alphabetic character
match(lookahead);
} else {
error("Unexpected token in F()");
}
}

void parse(const char *expression) {
input = expression;
nextToken();
E();
if (lookahead != '\0') {
error("Unexpected input after parsing complete");
}
}

int main() {
const char *expression = "a + b * (c + d)";
printf("Parsing expression: %s\n", expression);

try {
    parse(expression);
    printf("Parsing succeeded!\n");
} catch (const char *errMsg) {
    printf("Parsing failed: %s\n", errMsg);
}

return 0;
}

%{
#include <stdio.h>
#include <string.h>

void print_token(const char *token_type, const char *lexeme) {
printf("<%s>: %s\n", token_type, lexeme);
}
%}

%option noyywrap

%%
"auto"|"break"|"case"|"char"|"const"|"continue"|"default"|"do"|"double"|
"else"|"enum"|"extern"|"float"|"for"|"goto"|"if"|"int"|"long"|
"register"|"return"|"short"|"signed"|"sizeof"|"static"|"struct"|"switch"|
"typedef"|"union"|"unsigned"|"void"|"volatile"|"while" { print_token("keyword", yytext); }

"=="|"!="|"<="|">="|"<"|">"|"="|"+"|"-"|"*"|"/"|"%"|"++"|"--"|
"&&"|"||"|"!"|"&"|"|"|"^"|"~" { print_token("operator", yytext); }

[0-9]+ { print_token("number", yytext); }

[a-zA-Z_][a-zA-Z0-9_]* { print_token("identifier", yytext); }

"([^\\"]|\.)*" { print_token("string", yytext); }

'([^\\']|\.)*' { print_token("char", yytext); }

"(" { print_token("left parenthesis", yytext); }
")" { print_token("right parenthesis", yytext); }
"{" { print_token("left brace", yytext); }
"}" { print_token("right brace", yytext); }
"[" { print_token("left bracket", yytext); }
"]" { print_token("right bracket", yytext); }
";" { print_token("semicolon", yytext); }
"," { print_token("comma", yytext); }
"." { print_token("dot", yytext); }

[ \t\n\r]+ /* Ignore whitespace */
. { print_token("unknown", yytext); }
%%

int main(int argc, char **argv) {
if (argc != 2) {
fprintf(stderr, "Usage: %s <input_file>\n", argv[0]);
return 1;
}

FILE *file = fopen(argv[1], "r");
if (!file) {
    perror("Error opening file");
    return 1;
}

yyin = file;
yylex();
fclose(file);
return 0;
}

int yywrap() {
return 1;
}

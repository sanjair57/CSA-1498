#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include<math.h>

const char *input;
char lookahead;

void error(const char *msg) {
fprintf(stderr, "Error: %s\n", msg);
exit(1);
}

void nextToken() {
lookahead = *input++;
while (isspace(lookahead)) {
lookahead = *input++;
}
}

void match(char expected) {
if (lookahead == expected) {
nextToken();
} else {
char errorMsg[50];
snprintf(errorMsg, sizeof(errorMsg), "Expected '%c', but found '%c'", expected, lookahead);
error(errorMsg);
}
}

int expr(); // Forward declaration

int factor() {
int result = 0;
if (lookahead == '(') {
match('(');
result = expr();
match(')');
} else if (isdigit(lookahead)) {
result = lookahead - '0';
nextToken();
} else {
error("Unexpected token in factor()");
}
return result;
}

int exponentiation() {
int result = factor();
while (lookahead == '^') {
match('^');
result = (int)pow(result, factor());
}
return result;
}

int term() {
int result = exponentiation();
while (lookahead == '' || lookahead == '/') {
if (lookahead == '') {
match('*');
result *= exponentiation();
} else if (lookahead == '/') {
match('/');
result /= exponentiation();
}
}
return result;
}

int expr() {
int result = term();
while (lookahead == '+' || lookahead == '-') {
if (lookahead == '+') {
match('+');
result += term();
} else if (lookahead == '-') {
match('-');
result -= term();
}
}
return result;
}

int parse(const char *expression) {
input = expression;
nextToken();
int result = expr();
if (lookahead != '\0') {
error("Unexpected input after parsing complete");
}
return result;
}

int main() {
const char expression = "3+52^(2-1)";
printf("Evaluating expression: %s\n", expression);

int result = parse(expression);
printf("Result: %d\n", result);

return 0;
}

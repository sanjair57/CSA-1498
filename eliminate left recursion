#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#define MAX_RULES 10
#define MAX_LEN 20

char productions[MAX_RULES][MAX_LEN];
char new_productions[MAX_RULES * 2][MAX_LEN]; // Increased to accommodate potential new productions

int num_productions = 0;

void eliminate_left_recursion() {
for (int i = 0; i < num_productions; i++) {
char non_terminal = productions[i][0];
bool left_recursive = false;

    for (int j = 3; productions[i][j] != '\0'; j++) {
        if (productions[i][j] == non_terminal) {
            left_recursive = true;
            break;
        }
    }

    if (left_recursive) {
        // Generate new non-terminal
        char new_non_terminal = non_terminal + 'A' - 'a';

        // Update original production
        int pos = 0;
        for (int j = 3; productions[i][j] != '\0'; j++) {
            if (productions[i][j] == non_terminal) {
                new_productions[num_productions][pos++] = new_non_terminal;
                new_productions[num_productions][pos++] = ' ';
            } else {
                new_productions[num_productions][pos++] = productions[i][j];
            }
        }
        new_productions[num_productions][pos++] = new_non_terminal;
        new_productions[num_productions][pos] = '\0';

        // Add new production
        pos = 0;
        new_productions[num_productions + 1][pos++] = new_non_terminal;
        new_productions[num_productions + 1][pos++] = ' ';
        new_productions[num_productions + 1][pos++] = 'b'; // Example of alternative production
        new_productions[num_productions + 1][pos] = '\0';

        num_productions += 2; // Two new productions added
    } else {
        strcpy(new_productions[num_productions], productions[i]);
        num_productions++;
    }
}
}

void print_productions() {
printf("\nProductions after eliminating left recursion:\n");
for (int i = 0; i < num_productions; i++) {
printf("%s\n", new_productions[i]);
}
}

int main() {
char input[MAX_LEN];

// Prompt user to enter productions
printf("Enter grammar productions (e.g., A -> A alpha | beta, end with 'end'): \n");

// Read productions until "end" is entered or maximum number of productions reached
while (1) {
    fgets(input, sizeof(input), stdin);

    // Remove the newline character at the end of the input
    input[strcspn(input, "\n")] = '\0';

    if (strcmp(input, "end") == 0 || num_productions >= MAX_RULES) {
        break;
    }

    strcpy(productions[num_productions], input);
    num_productions++;
}

printf("\nOriginal productions:\n");
for (int i = 0; i < num_productions; i++) {
    printf("%s\n", productions[i]);
}

eliminate_left_recursion();

print_productions();

return 0;
}
